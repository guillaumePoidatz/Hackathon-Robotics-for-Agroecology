%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Work from Guillaume Poidatz and Runkun Luo - From the code of RÃ©my Huet
% 2024

clear all
close all
load data_matlab.mat

% Given parameters for the filter
NB_STEPS = length(gt); % gt is a struct with two parameter : x and birth, 
% NB_STEPS is the number of measurements (200 from gt (ground truth)
BOUND = 100;
% BOUND is the limit detection of the LIDAR (100 m -> determined by the 
% specifications of your sensor)

% detection params
PD = 0.95; % 0.999 in the subect, it is advice to use PD = 1 (PD is the 
% probability of an object to be detected). For the no noise case it should
% be obviously 1 but there are some numerical problem in the equation
% resulting in weights equal to nan. So, in practice for the no noise case,
% we set PD very high almost 1
lc = 4; % expectation over the clutters generated by the sensors,

% noises covariance matrices respectively on the evolution model and
% observation model
Q = diag([0.05, 0.05, 0.03, 0.05]);
R = diag([0.0001^2, 0.004 * 0.017453^2]); %diag([0.1^2, 4 * 0.017453^2]); version without noise

% Compute clutter intensity function
intensity_c =  2; %0; version without noise

% time parameter
dt = 1; 
% considering the data from gt (ground truth), if we want to respect a 
% average pedestrian speed of 1.33 m/s, it seems that dt has to be at 1
% second

% survival parameter
PS = 0.9;
% if we considerer the lidar motionless, 0.9 seems to be a good first
% approximation

%Birth weight
birth_weight = 0.1;
prune_threshold = 5e-4; % choose a threshold, keep is low (< 1e-3)
% this threshold is used to select which hypothesis we decide to cancel
% consesidering their weight (the confidence about the Gaussian
% representing indeed an object). To avoid exploring useless part of the
% space
nmax =  500; %100 version without noise % this is the maximum number of particule
% this is with prune_threshold, the second parameter in order to reduce the
% number of hypothesis

% Initialize state
states = struct([]); % the structure containing pur hypothesis 
% (states : x,y,theta,v) and covariance matrix
ws = [];

dists = zeros(NB_STEPS, 1);
real_objs = [];

for step = 1:NB_STEPS
  % 1. Prediction step
  ws = log(ws); % go back in the log domain for less computational intensity
  [ws, states] = PHD_predict(ws,states, dt, Q, PS);

  % 2. Correction step
  obs = all_obs{step};
  [ws, states] = PHD_update(ws, states, obs, R, PD, intensity_c);
  % Normalize weights (convert from log scale) (is we don't do that the
  % weights are negative and thus all the hypothesis are killed in the
  % reduction function. We assume that there is an error inside the code
  % but we didn't find it
  ws = exp(ws);
 
  % 3. Mixture Reduction
  [ws, states] = ref.reduction(ws, states, prune_threshold, nmax);

  % Display debug information
  disp("step:"), disp(step);
  disp("n components:"), disp(length(ws));

  % 4. Extract estimates
  % just for the plot
  objs = estimates(ws, states);

  % 5. Metrics
  % Extract number of estimates
  ...

  % Compute GOSPA over number of targets in ground truth
  % GOSPA means : "generalized optimal sub-pattern assignment"
  gtStep_array12 = [];
  for kGtStep = 1:length(gt{step})
      gt_array12(:,kGtStep) = gt{step}(kGtStep).x(1:2);
  end
  
  value = ref.GOSPA(objs,gtStep_array12,2);

  %%% Plot
  figure(1); clf;
  % Show the number of targets estimated by the filter to the real number
  % of targets over time.
  for i = 1:size(objs, 2)
      scatter(objs(1, i), objs(2, i), 'b','LineWidth', 4);
      hold on
  end

  for i = 1:size(gt{step}, 2)
      real_objs = gt{step}(i).x;
      scatter(real_objs(1), real_objs(2), 'x','LineWidth', 3);
  end

  xlim([-BOUND, BOUND]); 
  ylim([-BOUND, BOUND]);
  hold off;
  pause(0.2);

  % graph of number of target estimated vs true number of targer 
  figure(2)
  scatter(step, size(objs,2), 10,'b','filled');
  hold on
  scatter(step,size(gt{step}, 2),10,'r','filled');

  %%% End plot

  % 6. Birth of new components
  [ws, states] = birthmodel(obs, birth_weight, R);
  
end
